classdef AJCT_Element < handle
% Element class for a 3-dimensional framed structure
    
    % Private properties go here
    properties (Access = private)
        A % Total Area
        Ayy % Shear Area in y axis
        Azz % Shear Area in z axis
        d % Vector containing distance between Nodes
        DOF % Degrees of freedom for element i
        E % Modulus of Elasticity
        FEF_G % Global element fixed end force vector
        gam % Small gamma matrix
        GAM % Big gamma matrix
        Iyy % Moment of inertia in the y axis
        Izz % Moment of inertia in the z axis
        J % Torsional constant
        Keg % Global element stiffness matrix
        L % Length
        v % Poisson's ratio
        webdir % Unit web vector for element i
        w % 3x1 vector of uniform loads in 3 coord. dir.s

        %% added properties that we want to change to not be properties later
        Ke
        FEF_LOC

    end
    
    % Public methods go here
    methods (Access = public)
        %% Constructor
        % Pass element properties to object
        function self = AJCT_Element(A, Ayy, Azz, E, element_nodes, Izz, Iyy, J, v, webdir, w)

            % Initialize given properties
            self.A = A;
            self.Ayy = Ayy;
            self.Azz = Azz;
            self.E = E;
            self.Iyy = Iyy;
            self.Izz = Izz;
            self.J = J;
            self.v = v;
            self.webdir = webdir;
            self.w = w;

            % Compute any other necessary properties
            self.ComputeLength(element_nodes); % Length
            self.ComputeTransformationMatrix(); % Gamma Matrix
            self.ComputeElasticStiffnessMatrix(); % Stiffness Matrix
            self.RetrieveDOF(element_nodes); % Degrees of Freedom
            self.ComputeFixedEndForces(); % Fixed End Forces
        end
        
        %% Make degrees of freedom public
        function eDOF = GetDOF(self)
            eDOF = self.DOF;
        end
        
        %% Make global stiffness matrix public
        function Kglo = GetKGloEleMatrix(self)
            Kglo = self.Keg;
        end
        
        %% Make global fixed end force vector public
        function fefg = GetFEF(self)
            fefg = self.FEF_G;
        end
    end
    
    % Private methods go here
    methods (Access = private)
        %% Compute the element's length
        function ComputeLength(self, element_nodes)
            % Pass two Node objects to function
            node1 = element_nodes(1,1);
            node2 = element_nodes(2,1);

            % Get coordinates of Node objects
            ncoord1 = node1.GetNodeCoord();
            ncoord2 = node2.GetNodeCoord();

            % Calculate length of object
            dist = ncoord2 - ncoord1; % calc distance between nodes
            self.d = dist; % 1x3 matrix of distance between nodes
            length = sqrt((dist(1,1))^2+(dist(1,2))^2+(dist(1,3))^2); % 3D distance formula
            self.L = length; % assign length property to object
        end
        
        %% Compute the element's geometric transformation matrix
        function ComputeTransformationMatrix(self)
            % Create small gamma matrix with placeholder 0's
            small_gam = zeros(3,3);
            % Calculate actual small gamma matrix values
            nor = self.d/self.L; % Normalize vector containing distance btwn nodes
            small_gam(1,:) = nor; % Set first row of small gamma to...
            % normalized distance vector
            small_gam(2,:) = self.webdir; % Set second row of small...
            % gamma to cross product of third and first row
            small_gam(3,:) = (cross(small_gam(1,:),small_gam(2,:))); % Set third row of small...
            % gamma to cross product of normalized distance vector & unit 
            % y-axis vector
            self.gam = small_gam;
           
            % Create big gamma matrix
            big_gam = blkdiag(small_gam,small_gam,small_gam,small_gam);
            self.GAM = big_gam;
        end
        
        %% Compute the element's elastic stiffness matrix in local and global coordinates
        function ComputeElasticStiffnessMatrix(self)
            % Initiate sparse matrix
            Ke_loc = sparse(12,12); % Note: if you want less degrees of freedom,
            % this will have to be manually changed later
     
            % Compute any variables used in stiffness matrix
            G = self.E/(2*(1+self.v));
            phiY = (12*self.E*self.Izz)/(G*self.Ayy*self.L^2);
            phiZ = (12*self.E*self.Iyy)/(G*self.Azz*self.L^2);
            
            % Calculate terms of stiffness matrix
            k_axial = self.E*self.A/self.L;
            k_flex_z1 = (12*self.E*self.Izz)/(self.L^3*(1+phiY));
            k_flex_z2 = (6*self.E*self.Izz)/(self.L^2*(1+phiY));
            k_flex_z3 = ((4+phiY)*self.E*self.Izz)/(self.L*(1+phiY));
            k_flex_z4 = ((2-phiY)*self.E*self.Izz)/(self.L*(1+phiY));
            k_flex_y1 = (12*self.E*self.Iyy)/(self.L^3*(1+phiZ));
            k_flex_y2 = (6*self.E*self.Iyy)/(self.L^2*(1+phiZ));
            k_flex_y3 = ((4+phiZ)*self.E*self.Iyy)/(self.L*(1+phiZ));
            k_flex_y4 = ((2-phiZ)*self.E*self.Iyy)/(self.L*(1+phiZ));
            k_torsion = G*self.J/self.L;

            % Create local axial stiffness matrix
            k_mat_axial = k_axial*[1,-1;-1,1];

            % Create local flexural z stiffness matrix
            k_mat_flexz = [k_flex_z1,k_flex_z2,-k_flex_z1,k_flex_z2;...
                k_flex_z2,k_flex_z3,-k_flex_z2,k_flex_z4;...
                -k_flex_z1,-k_flex_z2,k_flex_z1,-k_flex_z2;...
                k_flex_z2,k_flex_z4,-k_flex_z2,k_flex_z3];

            % Create local flexural y stiffness matrix
            k_mat_flexy = [k_flex_y1,-k_flex_y2,-k_flex_y1,-k_flex_y2;...
                -k_flex_y2,k_flex_y3,k_flex_y2,k_flex_y4;...
                -k_flex_y1,k_flex_y2,k_flex_y1,k_flex_y2;...
                -k_flex_y2,k_flex_y4,k_flex_y2,k_flex_y3];

            % Create local torsional stiffness matrix
            k_mat_torsion = k_torsion*[1,-1;-1,1];

            % Map local submatrices to local 
            Ke_loc([1 7],[1 7]) = k_mat_axial;

            % Create stiffness matrix
            Ke_loc(1,1) = k1;
            Ke_loc(7,1) = -k1;
            Ke_loc(2,2) = k2;
            Ke_loc(6,2) = k3;
            Ke_loc(8,2) = -k2;
            Ke_loc(12,2) = k3;
            Ke_loc(3,3) = k7;
            Ke_loc(5,3) = -k3;
            Ke_loc(9,3) = -k7;
            Ke_loc(11,3) = -k3;
            Ke_loc(4,4) = k4;
            Ke_loc(10,4) = -k4;
            Ke_loc(3,5) = -k3;
            Ke_loc(5,5) = k5;
            Ke_loc(9,5) = k3;
            Ke_loc(11,5) = k6;
            Ke_loc(2,6) = k3;
            Ke_loc(6,6) = k5;
            Ke_loc(8,6) = -k3;
            Ke_loc(12,6) = k6;
            Ke_loc(1,7) = -k1;
            Ke_loc(7,7) = k1;
            Ke_loc(2,8) = -k2;
            Ke_loc(6,8) = -k3;
            Ke_loc(8,8) =  k2;
            Ke_loc(12,8) = -k3;
            Ke_loc(3,9) = -k2;
            Ke_loc(5,9) = k3;
            Ke_loc(9,9) = k2;
            Ke_loc(11,9) = k3;
            Ke_loc(4,10) = -k4;
            Ke_loc(10,10) = k4;
            Ke_loc(3,11) = -k3;
            Ke_loc(11,11) = k5;
            Ke_loc(9,11) = k3;
            Ke_loc(5,11) = k6;
            Ke_loc(2,12) = k3;
            Ke_loc(12,12) = k5;
            Ke_loc(8,12) = -k3;
            Ke_loc(6,12) = k6;

            disp('this is K_loc')
            disp(Ke_loc)
 
            % Convert local stiffness matrix to global stiffness matrix
            self.ComputeTransformationMatrix();
            Ke_glo = (self.GAM)'*Ke_loc*self.GAM;
            self.Keg = Ke_glo;

            disp('this is Keg')
            disp(self.Keg)
            disp('you got this bitch')
        end
        
        %% Retrieve the degrees of freedom associated with the element nodes
        function RetrieveDOF(self,element_nodes)
            % Pass two Node objects to function
            node1 = element_nodes(1,1);
            node2 = element_nodes(2,1);
            
            % Get degrees of freedom of nodes
            dof = [GetNodeDOF(node1);GetNodeDOF(node2)];
            self.DOF = dof;
        end
        
        %% Compute fixed end forces of the element
        function ComputeFixedEndForces(self)
            % Pull in any necessary properties
            len = self.L;
            big_gam = self.GAM;
            
            % Pull uniform loads in each of the coordinate directions...
            % from w vector
            self.w = self.w';
            wx = self.w(1,1);
            wy = self.w(2,1);
            wz = self.w(3,1);
            
            % Compute FEF / FEM in local coordinates
            fef_loc = zeros(12,1);
            local11 = wy*len/2;
            local12 = wx*len/2;
            local31 = wz*len/2;
            local41 = wz*len^2/12;
            local51 = 0;
            local61 = wy*len/2;
            local71 = wy*len^2/12;
            local81 = wx*len/2;
            local91 = wz*len/2;
            local101 = wz*len^2/12;
            local111 = 0;
            local121 = wy*len^2/12;

            % did this for efficiency and readability
            fef_loc(1,1) = local11;
            fef_loc(2,1) = local12;
            fef_loc(3,1) = local31;
            fef_loc(4,1) = local41;
            fef_loc(5,1) = local51;
            fef_loc(6,1) = local61;
            fef_loc(7,1) = local71;
            fef_loc(8,1) = local81;
            fef_loc(9,1) = local91;
            fef_loc(10,1) = local101;
            fef_loc(11,1) = local111;
            fef_loc(12,1) = local121;
                            
            % Compute FEF / FEM in global coordinates
            fef_glo = (big_gam')*fef_loc;
            self.FEF_G = fef_glo;  
                
        end

%         function ComputeForces(self, dispglobal)
%             % Retrieve necessary parameters
%             Ke = self.GAM*self.Keg
% 
%             % Recover global displacements related to each element's DOF
%             forces_local = Ke*self.gam*dispglobal + self.FEF_LOC
% 
%             % local_force = Ke*self.GAM* 
%         end
    end
end
